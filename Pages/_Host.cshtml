@page "/"
@namespace BlazorGamepad.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>App1</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <script src="~/js/signalr/dist/browser/signalr.min.js"></script>
</head>
<body>
    <app>
        <component type="typeof(App)" render-mode="ServerPrerendered" />
    </app>

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    @*<script src="~/js/app.js"></script>*@
    <script>

        const setupGamepadInterop = () => {

            const connection = new signalR.HubConnectionBuilder().withUrl("gamepad").build();

            const update = () => {
                const gamepads = navigator.getGamepads();
                if (gamepads === null) return;

                let gps = Array.from(gamepads);

                let gamepadObjects =
                    gps.map((gp) => {
                        if (gp == null) return null;

                        return {
                            ConnectionId: connection.connectionId,
                            Axes: gp.axes,
                            Buttons: gp?.buttons.map((b) => {
                                return {
                                    Value: b.value,
                                    Pressed: b.pressed
                                };
                            }) ?? [],
                            Connected: gp.connected,
                            Id: gp.id,
                            Index: gp.index,
                            Mapping: gp.mapping,
                            Timestamp: gp.timestamp
                        };
                    }).filter(gp => {
                        return gp != null;
                    });
                
                //console.log(connection);
                connection.invoke('UpdateJsonAsync', gamepadObjects);
            }

            const tick = (timestamp) => {
            //function tick(timestamp) {
                const rafId = requestAnimationFrame(tick);
                update();
            }

            connection
                .start()
                .then(() => tick())
                .catch(err => document.write(err));
        };

        setupGamepadInterop();
    </script>
</body>
</html>
